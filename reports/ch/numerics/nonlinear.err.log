Traceback (most recent call last):
  File "/home/davide/.local/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/davide/.local/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
"""
Example of Newton method

Find the solution of the problem f(x) = 0
with f(x) = e^x - x

"""

import numpy as np

# Function f and its derivative
f  = lambda x: np.exp(x) + x
df = lambda x: np.exp(x) + 1

# Parameters of the bi-section method
tol = 1e-6
max_niter = 100

# Find 2 values so that $f(a) f(b) < 0$
a, b = -2., 0.
niter = 0

if ( not f(a) * f(b) < 0 ):
    print("Bisection algorithm can't start, f(a)f(b)>= 0")
else:
    x = .5 * (a+b)
    fx = f(x)
    while ( np.abs(fc) > tol and niter < max_niter ):
        print(f" niter, x, fx: {niter}, {x}, {fx}")
        
        if ( f(x) * f(a) <= 0 ):  # new range [a,c]
            b = x
        else:  # new range [a,b]
            a = x
        
        # Update solution and residual
        x = .5 * (a+b)
        fx = f(x)

        # Update n.iter
        niter += 1            
        
print("Bisection method summary")
if ( niter < max_niter ):
    print(f"solution, x = {x}")
    print(f"res  : {f(x)}")
    print(f"niter: {niter}")
else:
    print(f"max n.iter reached without convergence")
    print(f"res: {f(x)}")

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[1], line 28[0m
[1;32m     26[0m x [38;5;241m=[39m [38;5;241m.5[39m [38;5;241m*[39m (a[38;5;241m+[39mb)
[1;32m     27[0m fx [38;5;241m=[39m f(x)
[0;32m---> 28[0m [38;5;28;01mwhile[39;00m ( np[38;5;241m.[39mabs([43mfc[49m) [38;5;241m>[39m tol [38;5;129;01mand[39;00m niter [38;5;241m<[39m max_niter ):
[1;32m     29[0m     [38;5;28mprint[39m([38;5;124mf[39m[38;5;124m"[39m[38;5;124m niter, x, fx: [39m[38;5;132;01m{[39;00mniter[38;5;132;01m}[39;00m[38;5;124m, [39m[38;5;132;01m{[39;00mx[38;5;132;01m}[39;00m[38;5;124m, [39m[38;5;132;01m{[39;00mfx[38;5;132;01m}[39;00m[38;5;124m"[39m)
[1;32m     31[0m     [38;5;28;01mif[39;00m ( f(x) [38;5;241m*[39m f(a) [38;5;241m<[39m[38;5;241m=[39m [38;5;241m0[39m ):  [38;5;66;03m# new range [a,c][39;00m

[0;31mNameError[0m: name 'fc' is not defined

