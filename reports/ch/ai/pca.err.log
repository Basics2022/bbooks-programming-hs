Traceback (most recent call last):
  File "/home/davide/.local/lib/python3.8/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/davide/.local/lib/python3.8/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/lib/python3.8/asyncio/base_events.py", line 616, in run_until_complete
    return future.result()
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/davide/.local/lib/python3.8/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import scipy as sp

from skimage import data, color
import matplotlib.pyplot as plt

image = data.camera()
#image = data.astronaut()
image = color.rgb2gray(image)

# Display the image
plt.imshow(image, cmap='gray')
plt.axis('off')

#> Preprocessing
image_avg = np.mean(image)
A = image - image_avg

#> Compute SVD
U, s, Vh = sp.linalg.svd(A, full_matrices=False)

#> Show singular values and energy error
plt.figure()
plt.subplot(3,1,1)
plt.semilogy(s, 'o')
plt.title("Singular values")

energy_error = np.sum(s) - np.cumsum(s)
plt.subplot(3,1,2)
plt.semilogy(energy_error/np.sum(s), 'o')
plt.title("Energy error [%]")
plt.ylim(1e-5,1)

storage = ( np.shape(image)[0] + np.shape(image)[1] ) * np.arange(len(s))
original_data = np.shape(image)[0] * np.shape(image)[1]
plt.subplot(3,1,3)
plt.plot(storage/original_data, 'o', label='compressed image')
plt.plot([0, len(s)-1], [1, 1], label='original_data')
plt.title("Storage [%]")
# plt.ylim(1e-5,1)


#
n_svd = 100
sigmaVh_svd = np.diag(s[0:n_svd]) @  Vh[0:n_svd,:]
A_svd = U[:,0:n_svd] @ sigmaVh_svd + image_avg


plt.figure()
plt.subplot(1,2,1)
plt.imshow(A_svd, cmap='gray')
plt.axis('off')
plt.title("Compressed image")

plt.subplot(1,2,2)
plt.imshow(image-A_svd, cmap='gray')
plt.axis('off')
plt.title("Difference")

plt.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[1], line 9[0m
[1;32m      7[0m image [38;5;241m=[39m data[38;5;241m.[39mcamera()
[1;32m      8[0m [38;5;66;03m#image = data.astronaut()[39;00m
[0;32m----> 9[0m image [38;5;241m=[39m [43mcolor[49m[38;5;241;43m.[39;49m[43mrgb2gray[49m[43m([49m[43mimage[49m[43m)[49m
[1;32m     11[0m [38;5;66;03m# Display the image[39;00m
[1;32m     12[0m plt[38;5;241m.[39mimshow(image, cmap[38;5;241m=[39m[38;5;124m'[39m[38;5;124mgray[39m[38;5;124m'[39m)

File [0;32m~/.local/lib/python3.8/site-packages/skimage/_shared/utils.py:338[0m, in [0;36mchannel_as_last_axis.__call__.<locals>.fixed_func[0;34m(*args, **kwargs)[0m
[1;32m    335[0m channel_axis [38;5;241m=[39m kwargs[38;5;241m.[39mget([38;5;124m'[39m[38;5;124mchannel_axis[39m[38;5;124m'[39m, [38;5;28;01mNone[39;00m)
[1;32m    337[0m [38;5;28;01mif[39;00m channel_axis [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[0;32m--> 338[0m     [38;5;28;01mreturn[39;00m [43mfunc[49m[43m([49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    340[0m [38;5;66;03m# TODO: convert scalars to a tuple in anticipation of eventually[39;00m
[1;32m    341[0m [38;5;66;03m#       supporting a tuple of channel axes. Right now, only an[39;00m
[1;32m    342[0m [38;5;66;03m#       integer or a single-element tuple is supported, though.[39;00m
[1;32m    343[0m [38;5;28;01mif[39;00m np[38;5;241m.[39misscalar(channel_axis):

File [0;32m~/.local/lib/python3.8/site-packages/skimage/color/colorconv.py:875[0m, in [0;36mrgb2gray[0;34m(rgb, channel_axis)[0m
[1;32m    834[0m [38;5;129m@channel_as_last_axis[39m(multichannel_output[38;5;241m=[39m[38;5;28;01mFalse[39;00m)
[1;32m    835[0m [38;5;28;01mdef[39;00m [38;5;21mrgb2gray[39m(rgb, [38;5;241m*[39m, channel_axis[38;5;241m=[39m[38;5;241m-[39m[38;5;241m1[39m):
[1;32m    836[0m [38;5;250m    [39m[38;5;124;03m"""Compute luminance of an RGB image.[39;00m
[1;32m    837[0m 
[1;32m    838[0m [38;5;124;03m    Parameters[39;00m
[0;32m   (...)[0m
[1;32m    873[0m [38;5;124;03m    >>> img_gray = rgb2gray(img)[39;00m
[1;32m    874[0m [38;5;124;03m    """[39;00m
[0;32m--> 875[0m     rgb [38;5;241m=[39m [43m_prepare_colorarray[49m[43m([49m[43mrgb[49m[43m)[49m
[1;32m    876[0m     coeffs [38;5;241m=[39m np[38;5;241m.[39marray([[38;5;241m0.2125[39m, [38;5;241m0.7154[39m, [38;5;241m0.0721[39m], dtype[38;5;241m=[39mrgb[38;5;241m.[39mdtype)
[1;32m    877[0m     [38;5;28;01mreturn[39;00m rgb [38;5;241m@[39m coeffs

File [0;32m~/.local/lib/python3.8/site-packages/skimage/color/colorconv.py:140[0m, in [0;36m_prepare_colorarray[0;34m(arr, force_copy, channel_axis)[0m
[1;32m    137[0m [38;5;28;01mif[39;00m arr[38;5;241m.[39mshape[channel_axis] [38;5;241m!=[39m [38;5;241m3[39m:
[1;32m    138[0m     msg [38;5;241m=[39m ([38;5;124mf[39m[38;5;124m'[39m[38;5;124mthe input array must have size 3 along `channel_axis`, [39m[38;5;124m'[39m
[1;32m    139[0m            [38;5;124mf[39m[38;5;124m'[39m[38;5;124mgot [39m[38;5;132;01m{[39;00marr[38;5;241m.[39mshape[38;5;132;01m}[39;00m[38;5;124m'[39m)
[0;32m--> 140[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(msg)
[1;32m    142[0m float_dtype [38;5;241m=[39m _supported_float_type(arr[38;5;241m.[39mdtype)
[1;32m    143[0m [38;5;28;01mif[39;00m float_dtype [38;5;241m==[39m np[38;5;241m.[39mfloat32:

[0;31mValueError[0m: the input array must have size 3 along `channel_axis`, got (512, 512)

