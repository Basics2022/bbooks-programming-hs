{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b390c05a-a1bf-44df-99e0-fe051aa9be63",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "# Test di verifica d'ipotesi - Fisher\n",
    "\n",
    "Il test di verifica di un'ipotesi di Fisher si ispira al principio di falsificabilità di Popper, e può essere riassunto nei seguenti passaggi:\n",
    "1. formulazione di un'ipotesi falsificabile, definita **ipotesi nulla** $\\text{H}_0$, da verificare e che viene ritenuta vera fino a prova contraria\n",
    "2. scelta di una variabile esplicativa, o **statistica test**, $x$, un parametro disponibile, rilevante per il fenomeno indagato e di cui è nota - o approssimabile, sotto ipotesi ragionevoli sul fenomeno - la distribuzione di probabilità,\n",
    "   $$p(x|\\text{H}_0)$$\n",
    "3. scelta del **test statistico** (es. una coda o due code,...), in base anche alle caratteristiche del fenomeno indagato\n",
    "4. scelta del **livello di significatività**, $\\alpha$, del test; il valore del livello di significatività traduce \"il livello di evidenza richiesto\" per falsificare l'ipotesi e - insieme alle caratteristiche del fenomeno e del test - determina le *regioni di rifiuto e di accettazione dell'ipotesi*, gli intervalli di valori della statistica test $x$ che determinano se l'ipotesi è stata falsificata o meno;\n",
    "5. raccolta dati e **calcolo statistica test sul campione**\n",
    "6. **confronto** del valore calcolato della statistica test con gli intervalli di rifiuto e accettazione della variabile soggetta all'ipotesi nulla, e **verdetto sull'ipotesi**\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc6bd8a3-8e49-40a1-b754-6f1f191b073b",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "## Esempio: moneta truccata o no?\n",
    "Il lancio di una moneta viene modellato come una variabile casuale $X$ di Bernoulli, con due possibili uscite testa, $X=0$, o croce, $X=1$. La forma generale della distribuzione di probabilità di una variabile casuale di Bernoulli $B(p)$ è\n",
    "\n",
    "$$p(X) = \\begin{cases} p & , \\quad X = H:\\text{Head} \\\\ 1-p & , \\quad X = T:\\text{Tail} \\end{cases} \\ ,$$\n",
    "\n",
    "essendo $p \\in [0,1]$ la probabilità associata al valore $X=H$ e $1-p$ quella associata al valore $X=T$.\n",
    "\n",
    "Per la verifica dell'ipotesi si organizza una campagna sperimentale di $n$ lanci e si sceglie come **statistica test** $x$ il numero di volte che il risultato del lancio è testa, $X=H$.\n",
    "Per una variabile casuale con distribuzione di probabilità di Bernoulli $B(p)$, il numero $x$ di risultati $X=H$ in $n$ ripetizioni indipendenti dell'evento è a sua volta una variabile casuale, con distribuzione di probabilità binomiale $\\mathscr{B}(n,p)$\n",
    "\n",
    "$$p_n(x) = \\left( \\begin{matrix} n \\\\ x \\end{matrix}  \\right) \\, p^x \\, (1-p)^{n-x}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e6d2ede9-d689-4f1f-b493-72261f8bf74e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import libraries\n",
    "import numpy as np\n",
    "import scipy as sp\n",
    "\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "cd3d393b-e80e-4634-81f6-0856f97cf6bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#> Random process of interest, unknown execpt for the sample.\n",
    "p_head = .5\n",
    "p_tail = 1. - p_head\n",
    "\n",
    "# Coin flip as a Bernoulli probability with outcomes: a = [0, 1] with prob p = [\n",
    "flip_rng = np.random.default_rng(42).choice\n",
    "flip_params = { 'a': [0,1], 'p': [p_head, p_tail], 'size': 1 }\n",
    "n_flips = 20\n",
    "  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "08c0be2b-4112-4261-8bcf-9f855a24ea8d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ! Approach for low-dimensional problems, with no memory or performance issues\n",
    "\n",
    "#> Null hypotesis, H0: the coin is fair\n",
    "# The outcome of a single flip is a r.v. distributed like a Bernoulli variable with p_head = .5\n",
    "# Every flip is statistically independent from the other\n",
    "xv = np.arange(n_flips+1)\n",
    "\n",
    "#> Test statistics: average n.of heads in flip_n samples\n",
    "# H0 hypotesis implies that the outcome of flip_n is a r.v. with Binomial pdf\n",
    "x_H0_fv = sp.stats.binom.pmf(xv, n_flips, p_head)\n",
    "\n",
    "#> Test characteristics: symmetric\n",
    "test_type = 'value'  # 'symmetric', 'right', 'left', 'value'\n",
    "\n",
    "#> Significance level, alpha = .05 (\"default\")\n",
    "alpha = .05\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "d914da77-65d5-4d89-8ff3-3e72c8d21117",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acceptance region, x in [6, 14]\n"
     ]
    }
   ],
   "source": [
    "#> Acceptance and rejection regions, for discrete pdf\n",
    "# Starting from the value of the test statistics x_max = max(x_H0_fv), expand \n",
    "\n",
    "def find_acceptance_region(p, alpha, test_type='value'):\n",
    "    \"\"\" Find acceptance region for a discrete pdf, supposed to be unimodal \"\"\"\n",
    "    x_max = np.argmax(p)\n",
    "    nx = len(p)\n",
    "    threshold = 1. - alpha\n",
    "\n",
    "    # Initialization\n",
    "    p_acc, xl, xr = p[x_max], x_max, x_max\n",
    "    \n",
    "    # if ( test_type == 'value' ):\n",
    "    while ( p_acc < threshold ):\n",
    "        if ( p[xl-1] >= p[xr+1] ):\n",
    "            xl -= 1;  p_acc += p[xl]\n",
    "        else:\n",
    "            xr += 1;  p_acc += p[xr]\n",
    "\n",
    "    # else:\n",
    "    return xl, xr\n",
    "\n",
    "xl, xr = find_acceptance_region(x_H0_fv, alpha,)\n",
    "print(f\"Acceptance region, x in [{xl}, {xr}]\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6de99c43-d497-4bf5-8b04-9a620e3c1b31",
   "metadata": {},
   "outputs": [],
   "source": [
    "#> Run experiment\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "e63510bc-3808-42f3-a63d-1e8461e4bd1c",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import libraries\n",
    "import numpy as np\n",
    "import scipy as sp\n",
    "from functools import partial\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#> Define random number generator for coin toss\n",
    "toss_rng = np.random.default_rng(42).choice                   # Bernoulli distribution\n",
    "toss_rng_params_default  = {                                  # Params of a fair coin, 1 toss\n",
    "    'a':[0,1], 'p':[.5,.5], 'size':1 } \n",
    "toss_params_default = {'o': ['head', 'tail'], 'v':[0, 1]}\n",
    "# o: outcomes; a: indices associated with outcomes; p: probabilities; v: values\n",
    "\n",
    "#> Function for running coin toss experiments\n",
    "def toss_experiment(rng=toss_rng, rng_params=toss_rng_params_default, \n",
    "                    toss_params=toss_params_default, verbose=False):\n",
    "    \"\"\"  \"\"\"\n",
    "    x = toss_rng(**rng_params)\n",
    "    if verbose:\n",
    "        return np.sum([ toss_params['v'][xx] for xx in x]), x\n",
    "    else:\n",
    "        return np.sum([ toss_params['v'][xx] for xx in x])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34d61c5f-eaaa-480f-9bae-1f446561861d",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "#### Esempi di esperimento"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "2ec4ce78-44ad-400e-b8bd-3b6c2b9cc3cd",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Run an experiment with details: verbose=True\n",
      "n_tosses: 10\n",
      "sum(output), output list: (6, array([1, 0, 1, 1, 0, 1, 1, 1, 0, 0]))\n",
      "\n",
      "Run an experiment with details: verbose=False\n",
      "n_tosses: 1000\n",
      "sum(output): 494\n"
     ]
    }
   ],
   "source": [
    "#> Experiment, with details\n",
    "rng_params = toss_rng_params_default.copy()\n",
    "rng_params['size'] = 10\n",
    "print(\"\\nRun an experiment with details: verbose=True\")\n",
    "print(f\"n_tosses: {rng_params['size']}\")\n",
    "print(f\"sum(output), output list: {toss_experiment(rng_params=rng_params, verbose=True)}\")\n",
    "\n",
    "#> Experiment, with details\n",
    "rng_params['size'] = 1000\n",
    "print(\"\\nRun an experiment with details: verbose=False\")\n",
    "print(f\"n_tosses: {rng_params['size']}\")\n",
    "print(f\"sum(output): {toss_experiment(rng_params=rng_params, verbose=False)}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "027063e4-b47a-41c7-87a5-3b0083a9fc49",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Formulazione ipotesi nulla e import librerie\n",
    "Si formula qui l'ipotesi nulla, $\\text{H}_0$: \"la moneta non è truccata\", intendendo che non è truccato nemmeno il lancio della moneta o qualsiasi effetto agente sulla moneta non ha un effetto sulla statistica del lancio."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "a1226d24-c388-41a6-be8d-9e539df59316",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "kv = np.arange(20)\n",
    "f = sp.stats.binom.pmf(kv, n_tosses, .5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "8a6ee927-8594-47bc-929a-a59aac1167e9",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "#> Define random number generator for coin toss\n",
    "class H0_hypothesis:\n",
    "    def __init__(self, n_tosses=20):\n",
    "        \"\"\"  \"\"\"\n",
    "        self.n_tosses = n_tosses\n",
    "        self.toss_rng = np.random.default_rng().choice\n",
    "        self.toss_rng_params = toss_rng_params_fair\n",
    "        self.teststat_pdf_fun = lambda xv: \\\n",
    "            sp.stats.binom.pmf(xv, self.n_tosses, self.toss_rng_params['p'][0])\n",
    "        \n",
    "h0 = H0_hypothesis()\n",
    "# print(h0.teststat_pdf_fun(np.arange(10)))\n",
    "\n",
    "h0.n_tosses = 10\n",
    "# print(h0.teststat_pdf_fun(np.arange(10)))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a314f73d-0f6c-4908-90c2-fe440d7cc3a2",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Scelta statistica test\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "5e543f34-36bb-40ec-82e7-d7db59a012a3",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "5206458e-5a26-4db2-8064-2b0f731ca405",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "n_tails:n_tosses: 11:20\n"
     ]
    }
   ],
   "source": [
    "\n",
    "n_tosses = 20\n",
    "\n",
    "print(f\"n_tails:n_tosses: {toss_experiment(a,p,n_tosses)}:{n_tosses}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f96ac85-42ec-4958-a3c0-729ee4329807",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Livello di significatività"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "c8f73fd5-915e-46cc-bbf5-994f20beeef9",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "alpha = .05"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0276e3de-a06d-441e-abe8-723ad8ab53a0",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "source": [
    "### Test di Fisher\n",
    "\n",
    "Le scelte di:\n",
    "\n",
    "- **Ipotesi nulla**, **H0**: la moneta non è truccata. L'**ipotesi alternativa**, **H1**, è la negazione di H0: la moneta è truccata. \n",
    "\n",
    "- **Statistica test.** Si intende verificare l'ipotesi H0 usando come parametro di interesse il valore medio dei lancio della moneta, assegnando i valori 0: Head, 1: Tail.\n",
    "\n",
    "- **Test statistico.** Per la natura del problema si sceglie un test statistico a due code.\n",
    "\n",
    "- **Livello di significatività.** Si sceglie un livello di significatività pari a $\\sigma = .05$.\n",
    "\n",
    "permettono di determinare:\n",
    "\n",
    "- le **regioni di accettazione** e **di rifiuto** di H0, gli intervalli di valori del parametro di interesse che portano rispettivamente all'accettazione o al rifiuto dell'ipotesi H0.\n",
    "\n",
    "Il valore della statistica test calcolato con un campione di dati raccolto permette di stabilire se l'ipotesi H0 deve essere accettata o rigettata.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "71c3ef80-0867-478a-b123-3bf615c192f2",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 9 artists>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Null hypotesis, H0\n",
    "kv = np.arange(n_tosses+1)\n",
    "h0_pdf = sp.stats.binom.pmf(kv, n_tosses, .5)\n",
    "\n",
    "# Symmetric test: find max and extend acceptance range until sum_k p(k) ~ 1 - sigma\n",
    "k_max = np.argmax(h0_pdf)\n",
    "p_acc = h0_pdf[k_max]\n",
    "k0, k1 = k_max, k_max\n",
    "k_acc = [ k_max ]\n",
    "\n",
    "while ( p_acc < 1. - alpha ):    \n",
    "    k0 -= 1\n",
    "    k1 += 1\n",
    "\n",
    "    p_acc = p_acc + h0_pdf[k0] + h0_pdf[k1]\n",
    "    k_acc += [ k0, k1 ]\n",
    "    \n",
    "\n",
    "plt.figure()\n",
    "plt.bar(kv, h0_pdf)\n",
    "plt.bar(kv[k_acc], h0_pdf[k_acc])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "a9992fa6-ef50-4431-85da-f78bff2221a6",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sample x: 10\n",
      "H0 accepted\n"
     ]
    }
   ],
   "source": [
    "# Sample\n",
    "toss_sample = toss_experiment(a,p,n_tosses)\n",
    "# print(toss_sample)\n",
    "\n",
    "# Evaluate statistics\n",
    "x_sample = np.sum(toss_sample)\n",
    "print(f\"Sample x: {x_sample}\")\n",
    "\n",
    "# Evaluate H0\n",
    "if x_sample in k_acc:\n",
    "    print(\"H0 accepted\")\n",
    "else:\n",
    "    print(\"H0 rejected\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "7bafeeca-090a-4721-b5c3-29fd1b8d98c6",
   "metadata": {
    "editable": true,
    "slideshow": {
     "slide_type": ""
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<BarContainer object of 1 artists>"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plt.figure()\n",
    "plt.bar(kv, h0_pdf)\n",
    "plt.bar(kv[k_acc], h0_pdf[k_acc])\n",
    "plt.bar(kv[x_sample], h0_pdf[x_sample])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da6c5859-18fc-4675-8ed7-1cf8a45849c0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
